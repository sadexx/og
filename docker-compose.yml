services:
  olympus:
    container_name: ${APP_HOST}
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    restart: unless-stopped
    develop:
      watch:
        - action: sync
          path: ./src
          target: /usr/src/app/src
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json
    env_file:
      - .env
    ports:
      - "${INSTANCE_APP_PORT:-3000}:${APP_PORT:-3000}"
    depends_on:
      - redis
      - postgres
    networks:
      default:
        aliases:
          - olympus
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--spider",
          "http://olympus:${APP_PORT}/v1/health-check"
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    container_name: ${POSTGRES_HOST}
    image: postgres:17.2-alpine3.21
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - ${POSTGRES_PORT:-5432}:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      default:
        aliases:
          - postgres

  pgadmin:
    container_name: ${PGADMIN_HOST:-pgadmin}
    image: dpage/pgadmin4:8.14
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - ${PGADMIN_PORT:-5050}:80
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      default:
        aliases:
          - pgadmin

  redis:
    container_name: ${REDIS_HOST}
    image: redis:7.4.2-alpine3.21
    restart: unless-stopped
    ports:
      - ${REDIS_PORT:-6379}:6379
    volumes:
      - redis-data:/data
    networks:
      default:
        aliases:
          - redis

  grafana:
    container_name: ${GRAFANA_HOST}
    image: grafana/grafana-enterprise:11.5.0
    restart: unless-stopped
    env_file:
      - .env
    user: "0"
    ports:
      - ${GF_SERVER_HTTP_PORT:-3450}:3450
    volumes:
      - "$PWD/data:/var/lib/grafana"
    networks:
      default:
        aliases:
          - grafana

  prometheus:
    container_name: ${PROMETHEUS_HOST}
    image: prom/prometheus:v3.1.0
    restart: unless-stopped
    ports:
      - ${PROMETHEUS_PORT:-9090}:9090
    volumes:
      - "./prometheus.yml:/etc/prometheus/prometheus.yml"
      - "prometheus-data:/prometheus"
    networks:
      default:
        aliases:
          - prometheus

  node-exporter:
    container_name: ${NODE_EXPORTER_HOST}
    image: prom/node-exporter:v1.8.2
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.ignored-mount-points"
      - "^/(sys|proc|dev|host|etc)($|/)"
    restart: unless-stopped
    ports:
      - ${NODE_EXPORTER_PORT:-9100}:9100
    volumes:
      - "/proc:/host/proc:ro"
      - "/sys:/host/sys:ro"
      - "/:/rootfs:ro"
    networks:
      default:
        aliases:
          - node-exporter

  postgres-exporter:
    container_name: ${POSTGRES_EXPORTER_HOST}
    image: prometheuscommunity/postgres-exporter:v0.16.0
    env_file:
      - .env
    depends_on:
      - postgres
    ports:
      - ${POSTGRES_EXPORTER_PORT:-9187}:9187
    networks:
      default:
        aliases:
          - postgres-exporter

  nginx:
    container_name: ${NGINX_HOST}
    image: nginx:1.27.3-alpine3.20
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
    volumes:
      - "./nginx.conf:/etc/nginx/nginx.conf:ro"
    depends_on:
      - olympus
    networks:
      default:
        aliases:
          - nginx

networks:
  default:

volumes:
  postgres-data:
  pgadmin-data:
  redis-data:
  prometheus-data:
